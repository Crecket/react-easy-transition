{"version":3,"sources":["../../../../src/common/actions/route.js"],"names":["updateLocation","method","args","type","payload","push","replace","go","goBack","goForward","routerActions"],"mappings":"AAAA;;;;;;;;;AAGA;;;;;;AAMA,SAASA,cAAT,CAAwBC,MAAxB,EAAgC;AAC9B,SAAO;AAAA,sCAAIC,IAAJ;AAAIA,UAAJ;AAAA;;AAAA,WAAc;AACnBC,0CADmB;AAEnBC,eAAS,EAACH,cAAD,EAASC,UAAT;AAFU,KAAd;AAAA,GAAP;AAID;;AAED;;;;;AAKO,IAAMG,sBAAOL,eAAe,MAAf,CAAb;AACA,IAAMM,4BAAUN,eAAe,SAAf,CAAhB;AACA,IAAMO,kBAAKP,eAAe,IAAf,CAAX;AACA,IAAMQ,0BAASR,eAAe,QAAf,CAAf;AACA,IAAMS,gCAAYT,eAAe,WAAf,CAAlB;;AAEA,IAAMU,wCAAgB,EAACL,UAAD,EAAOC,gBAAP,EAAgBC,MAAhB,EAAoBC,cAApB,EAA4BC,oBAA5B,EAAtB","file":"route.js","sourcesContent":["'use strict'\r\nimport {CALL_HISTORY_METHOD} from 'constants'\r\n\r\n/**\r\n * This action type will be dispatched by the history actions below.\r\n * If you're writing a middleware to watch for navigation events, be sure to\r\n * look for actions of this type.\r\n */\r\n\r\nfunction updateLocation(method) {\r\n  return (...args) => ({\r\n    type: CALL_HISTORY_METHOD,\r\n    payload: {method, args}\r\n  })\r\n}\r\n\r\n/**\r\n * These actions correspond to the history API.\r\n * The associated routerMiddleware will capture these events before they get to\r\n * your reducer and reissue them as the matching function on your history.\r\n */\r\nexport const push = updateLocation('push')\r\nexport const replace = updateLocation('replace')\r\nexport const go = updateLocation('go')\r\nexport const goBack = updateLocation('goBack')\r\nexport const goForward = updateLocation('goForward')\r\n\r\nexport const routerActions = {push, replace, go, goBack, goForward}"]}