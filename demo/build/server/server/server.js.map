{"version":3,"sources":["../../../src/server/server.js"],"names":["__PROD__","process","env","NODE_ENV","__TEST__","port","PORT","server","on","reason","p","stack","console","error","use","json","urlencoded","extended","chokidar","require","config","webpack","webpackDevMiddleware","webpackHotMiddleware","compiler","quiet","noInfo","publicPath","output","stats","colors","debug","log","watcher","watch","join","cwd","cache","forEach","id","test","plugin","get","req","res","listen","err","info","module","exports"],"mappings":"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","file":"server.js","sourcesContent":["import path from 'path'\r\nimport express from 'express'\r\nimport helmet from 'helmet'\r\nimport bodyParser from 'body-parser'\r\nimport morgan from 'morgan'\r\nimport compression from 'compression'\r\n\r\nconst __PROD__ = process.env.NODE_ENV === 'production'\r\nconst __TEST__ = process.env.NODE_ENV === 'test'\r\nconst port = process.env.PORT || 5000\r\nconst server = express()\r\n\r\nprocess.on('unhandledRejection', (reason, p) => {\r\n  if (reason.stack) {\r\n    console.error(reason.stack)\r\n  } else {\r\n    console.error('Unhandled Rejection at: Promise ', p, ' reason: ', reason)\r\n  }\r\n})\r\n\r\nserver.use(bodyParser.json())\r\nserver.use(bodyParser.urlencoded({ extended: true }))\r\n\r\nif (__PROD__ || __TEST__) {\r\n  //const config = require('tools/webpack.config.prod')\r\n  server.use(morgan('combined'))\r\n  server.use(helmet())\r\n  server.use(compression())\r\n\r\n} else {\r\n  let chokidar = require('chokidar')\r\n  server.use(morgan('dev'))\r\n  const config = require('tools/webpack.config.dev.js')\r\n\r\n  const webpack = require('webpack')\r\n  const webpackDevMiddleware = require('webpack-dev-middleware')\r\n  const webpackHotMiddleware = require('webpack-hot-middleware')\r\n  const compiler = webpack(config)\r\n  server.use(webpackDevMiddleware(compiler, {\r\n    quiet: false,\r\n    noInfo: false,\r\n    publicPath: config.output.publicPath,\r\n    stats: {\r\n      colors: true\r\n    },\r\n    debug: true\r\n  }))\r\n  server.use(webpackHotMiddleware(compiler, { log: console.log }))\r\n\r\n  // Do \"hot-reloading\" of express stuff on the server\r\n  // Throw away cached modules and re-require next time\r\n  // Ensure there's no important state in there!\r\n\r\n  const watcher = chokidar.watch([\r\n    path.join(process.cwd(), 'src')\r\n  ]);\r\n\r\n  watcher.on('ready', function() {\r\n    watcher.on('all', function() {\r\n      console.log(\"Clearing /server/ module cache from server\");\r\n      Object.keys(require.cache).forEach(function(id) {\r\n        if (/[\\/\\\\]src[\\/\\\\]/.test(id)){\r\n          //console.log('SERVER MATCH: ', id)\r\n          delete require.cache[id];\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  // Do \"hot-reloading\" of react stuff on the server\r\n  // Throw away the cached client modules and let them be re-required next time\r\n  compiler.plugin('done', function() {\r\n    console.log(\"Clearing /client/ module cache from server\");\r\n    Object.keys(require.cache).forEach(function(id) {\r\n      if (/[\\/\\\\]src[\\/\\\\]/.test(id)){\r\n        //console.log('CLIENT MATCH: ', id)\r\n        delete require.cache[id];\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nserver.use(express.static(path.join(process.cwd(), 'demo', 'public')))\r\nserver.get('*', (req, res) => (require('./render/router'))(req, res, __PROD__) )\r\n\r\nserver.listen(port, '0.0.0.0', (err) => {\r\n  if (err) {\r\n    console.error(err);\r\n    throw err;\r\n  }\r\n  console.info('==> ðŸŒŽ Listening on port %s. Open up http://localhost:%s/ in your browser.', port, port);\r\n});\r\n\r\nmodule.exports = server"]}